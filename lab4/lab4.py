# -*- coding: utf-8 -*-
"""flab4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Rbk85Z94NEJvl6dVU_nCd5cHdmzdKGVq
"""

import numpy as np
import matplotlib.pyplot as plt 
import cv2
from google.colab.patches import cv2_imshow

originalImage = cv2.imread('111.png')
grayImage = cv2.cvtColor(originalImage, cv2.COLOR_BGR2GRAY)
  
#blackAndWhiteImage.resize(b,b)
cv2_imshow(originalImage)
cv2_imshow(grayImage)
cv2.waitKey(0)
cv2.destroyAllWindows()

def ublanket(img):
  k,l=img.shape
  u=np.ndarray(img.shape)
  for i in range(k):
    for j in range(l):
      if(i==0):
        if(j==0):
          u[i][j]=max(img[i][j]+1,img[i+1][j],img[i][j+1])
        else: 
          if(j==l-1):
            u[i][j]=max(img[i][j]+1,img[i][j-1],img[i+1][j])
          else:
            u[i][j]=max(img[i][j]+1,img[i][j-1],img[i+1][j],img[i][j+1])
      else:
        if(i==k-1):
          if(j==0):
            u[i][j]=max(img[i][j]+1,img[i-1][j],img[i][j+1])
          else:
            if(j==l-1):
              u[i][j]=max(img[i][j]+1,img[i-1][j],img[i][j-1])
            else:
              u[i][j]=max(img[i][j]+1,img[i-1][j],img[i][j-1],img[i][j+1])
        else:
          if(j==0):
            u[i][j]=max(img[i][j]+1,img[i-1][j],img[i+1][j],img[i][j+1])
          else:
            if(j==l-1):
              u[i][j]=max(img[i][j]+1,img[i-1][j],img[i][j-1],img[i+1][j])
            else:
              u[i][j]=max(img[i][j]+1,img[i-1][j],img[i][j-1],img[i+1][j],img[i][j+1])
              
  return u

def bblanket(img):
  k,l=img.shape
  b=np.ndarray(img.shape)
  for i in range(k):
    for j in range(l):
      if(i==0):
        if(j==0):
          b[i][j]=min(img[i][j]-1,img[i+1][j],img[i][j+1])
        else: 
          if(j==l-1):
            b[i][j]=min(img[i][j]-1,img[i][j-1],img[i+1][j])
          else:
            b[i][j]=min(img[i][j]-1,img[i][j-1],img[i+1][j],img[i][j+1])
      else:
        if(i==k-1):
          if(j==0):
            b[i][j]=min(img[i][j]-1,img[i-1][j],img[i][j+1])
          else:
            if(j==l-1):
              b[i][j]=min(img[i][j]-1,img[i-1][j],img[i][j-1])
            else:
              b[i][j]=min(img[i][j]-1,img[i-1][j],img[i][j-1],img[i][j+1])
        else:
          if(j==0):
            b[i][j]=min(img[i][j]-1,img[i-1][j],img[i+1][j],img[i][j+1])
          else:
            if(j==l-1):
              b[i][j]=min(img[i][j]-1,img[i-1][j],img[i][j-1],img[i+1][j])
            else:
              b[i][j]=min(img[i][j]-1,img[i-1][j],img[i][j-1],img[i+1][j],img[i][j+1])

  return b

def getVol(u,b):
  k,l=u.shape
  vol=0.0
  for i in range(k):
    for j in range(l):
      vol=vol+u[i][j]-b[i][j]

  return vol

u1=ublanket(grayImage)
u2=ublanket(u1)
u3=ublanket(u2)
b1=bblanket(grayImage)
b2=bblanket(b1)
b3=bblanket(b2)

grayImage, u1, b1

vol1=getVol(u1,b1)
vol2=getVol(u2,b2)
vol3=getVol(u3,b3)

A1=(vol2-vol1)/2
A2=(vol3-vol2)/2
#A1=vol1/2
#A2=vol2/4
#A3=vol3/6

#D=2-np.log(A2)/np.log(2)
D=2+((np.log(A1)-np.log(A2))/(np.log(1)-np.log(2)))
#D=2-(np.log(A2)-np.log(A3))/(np.log(2)-np.log(3))

vol1, vol2, A1, A2, np.log(A1), np.log(A2),D